import pickle
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import uniform
import time

# Step 1: Load your dataset
df = pd.read_csv("C:\\Users\\LENOVO\\Desktop\\mbti_1.csv")

# Step 2: Preprocess your data
X = df['posts']  # Features (social media posts)
y = df['type']   # Labels (personality types)

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Vectorize the text data using TF-IDF
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Step 5: Hyperparameter Tuning with GridSearchCV
param_grid = {
    'C': [1, 10],
    'gamma': ['scale', 'auto'],
    'kernel': ['linear']
}

print("\nPerforming GridSearchCV...")
start_time = time.time()
grid_search = GridSearchCV(SVC(random_state=42), param_grid, cv=3, verbose=1, n_jobs=-1)
grid_search.fit(X_train_tfidf, y_train)
print(f"GridSearchCV Time: {time.time() - start_time:.2f} seconds")
best_grid_model = grid_search.best_estimator_

# Evaluate Grid Search Model
y_pred_grid = best_grid_model.predict(X_test_tfidf)
grid_accuracy = accuracy_score(y_test, y_pred_grid)
print(f"GridSearchCV Model Accuracy: {grid_accuracy*100:.2f}%\n")

# Step 6: Hyperparameter Tuning with RandomizedSearchCV
param_dist = {
    'C': uniform(0.1, 10),
    'gamma': ['scale', 'auto'],
    'kernel': ['linear']
}

print("Performing RandomizedSearchCV...")
start_time = time.time()
random_search = RandomizedSearchCV(SVC(random_state=42), param_dist, n_iter=10, cv=3, verbose=1, n_jobs=-1, random_state=42)
random_search.fit(X_train_tfidf, y_train)
print(f"RandomizedSearchCV Time: {time.time() - start_time:.2f} seconds")
best_random_model = random_search.best_estimator_

# Evaluate Random Search Model
y_pred_random = best_random_model.predict(X_test_tfidf)
random_accuracy = accuracy_score(y_test, y_pred_random)
print(f"RandomizedSearchCV Model Accuracy: {random_accuracy*100:.2f}%\n")

# Step 7: Confusion Matrix for Best Models
def plot_confusion_matrix(y_test, y_pred, model_name):
    conf_matrix = confusion_matrix(y_test, y_pred, labels=best_grid_model.classes_)
    plt.figure(figsize=(10, 8))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=best_grid_model.classes_, yticklabels=best_grid_model.classes_)
    plt.title(f'{model_name} Confusion Matrix')
    plt.xlabel('Predicted Labels')
    plt.ylabel('True Labels')
    plt.show()

plot_confusion_matrix(y_test, y_pred_grid, "GridSearchCV")
plot_confusion_matrix(y_test, y_pred_random, "RandomizedSearchCV")

# Step 8: Save Models and Vectorizer
with open('best_grid_model.pkl', 'wb') as file:
    pickle.dump(best_grid_model, file)
with open('best_random_model.pkl', 'wb') as file:
    pickle.dump(best_random_model, file)
with open('vectorizer.pkl', 'wb') as file:
    pickle.dump(vectorizer, file)

print("Models and vectorizer have been saved successfully!")
